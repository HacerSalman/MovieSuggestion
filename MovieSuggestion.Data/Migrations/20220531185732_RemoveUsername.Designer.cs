// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieSuggestion.Data.Contexts;

namespace MovieSuggestion.Data.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20220531185732_RemoveUsername")]
    partial class RemoveUsername
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("MovieSuggestion.Data.Entities.Movie", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<bool>("Adult")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("adult");

                    b.Property<string>("BackdropPath")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("backdrop_path");

                    b.Property<long>("CreateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("create_time");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext")
                        .HasColumnName("modifier");

                    b.Property<string>("OriginalLanguage")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("original_language");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("original_title");

                    b.Property<string>("Overview")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("overview");

                    b.Property<string>("Owner")
                        .HasColumnType("longtext")
                        .HasColumnName("owner");

                    b.Property<double>("Popularity")
                        .HasColumnType("double")
                        .HasColumnName("popularity");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("poster_path");

                    b.Property<double>("Score")
                        .HasColumnType("double")
                        .HasColumnName("score");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("source_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("title");

                    b.Property<long>("UpdateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("Update_time");

                    b.Property<bool>("Video")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("video");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("Score");

                    b.HasIndex("SourceId")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("Title");

                    b.HasIndex("UpdateTime");

                    b.ToTable("movie");
                });

            modelBuilder.Entity("MovieSuggestion.Data.Entities.User", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<long>("CreateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("create_time");

                    b.Property<string>("Email")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("email");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext")
                        .HasColumnName("modifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("name");

                    b.Property<string>("Owner")
                        .HasColumnType("longtext")
                        .HasColumnName("owner");

                    b.Property<string>("Password")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("password");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("status");

                    b.Property<long>("UpdateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("Update_time");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.HasIndex("UpdateTime");

                    b.ToTable("user");
                });

            modelBuilder.Entity("MovieSuggestion.Data.Entities.UserMovie", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<long>("CreateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("create_time");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext")
                        .HasColumnName("modifier");

                    b.Property<ulong>("MovieId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("movie_id");

                    b.Property<string>("Owner")
                        .HasColumnType("longtext")
                        .HasColumnName("owner");

                    b.Property<double>("Score")
                        .HasColumnType("double")
                        .HasColumnName("score");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("status");

                    b.Property<long>("UpdateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("Update_time");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("MovieId");

                    b.HasIndex("Status");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("UserId", "MovieId")
                        .IsUnique();

                    b.ToTable("user_movie");
                });

            modelBuilder.Entity("MovieSuggestion.Data.Entities.UserMovieNote", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<long>("CreateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("create_time");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext")
                        .HasColumnName("modifier");

                    b.Property<ulong>("MovieId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("movie_id");

                    b.Property<string>("Note")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("note");

                    b.Property<string>("Owner")
                        .HasColumnType("longtext")
                        .HasColumnName("owner");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("status");

                    b.Property<long>("UpdateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("Update_time");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("MovieId");

                    b.HasIndex("Status");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("UserId");

                    b.ToTable("user_movie_note");
                });

            modelBuilder.Entity("MovieSuggestion.Data.Entities.UserPermission", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<long>("CreateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("create_time");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext")
                        .HasColumnName("modifier");

                    b.Property<string>("Owner")
                        .HasColumnType("longtext")
                        .HasColumnName("owner");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("permission");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("status");

                    b.Property<long>("UpdateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("Update_time");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("Status");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("UserId");

                    b.HasIndex("Permission", "UserId")
                        .IsUnique();

                    b.ToTable("user_permission");
                });

            modelBuilder.Entity("MovieSuggestion.Data.Enums.EntityStatus", b =>
                {
                    b.Property<string>("V")
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("v");

                    b.HasKey("V");

                    b.ToTable("entity_status");

                    b.HasData(
                        new
                        {
                            V = "ACTIVE"
                        },
                        new
                        {
                            V = "PASSIVE"
                        },
                        new
                        {
                            V = "DELETED"
                        });
                });

            modelBuilder.Entity("MovieSuggestion.Data.Enums.Permission", b =>
                {
                    b.Property<string>("V")
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("v");

                    b.HasKey("V");

                    b.ToTable("permission");

                    b.HasData(
                        new
                        {
                            V = "USER_MANAGE"
                        },
                        new
                        {
                            V = "MOVIE_MANAGE"
                        },
                        new
                        {
                            V = "MOVIE_DELETE"
                        });
                });

            modelBuilder.Entity("MovieSuggestion.Data.Entities.Movie", b =>
                {
                    b.HasOne("MovieSuggestion.Data.Enums.EntityStatus", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieSuggestion.Data.Entities.User", b =>
                {
                    b.HasOne("MovieSuggestion.Data.Enums.EntityStatus", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieSuggestion.Data.Entities.UserMovie", b =>
                {
                    b.HasOne("MovieSuggestion.Data.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MovieSuggestion.Data.Enums.EntityStatus", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MovieSuggestion.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieSuggestion.Data.Entities.UserMovieNote", b =>
                {
                    b.HasOne("MovieSuggestion.Data.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MovieSuggestion.Data.Enums.EntityStatus", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MovieSuggestion.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieSuggestion.Data.Entities.UserPermission", b =>
                {
                    b.HasOne("MovieSuggestion.Data.Enums.Permission", null)
                        .WithMany()
                        .HasForeignKey("Permission")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MovieSuggestion.Data.Enums.EntityStatus", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MovieSuggestion.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
